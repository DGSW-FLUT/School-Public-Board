{"version":3,"sources":["components/PercentageGauage.style.js","components/PercentageGauage.js","components/MealView.style.js","components/MealView.js","App.style.js","App.js","serviceWorker.js","index.js"],"names":["Content","styled","div","Bar","OutterBar","InnerBar","BarText","inject_date","moment","eject_date","PercentageGauage","number","fulltime","nowtime","this","props","nowDate","subtract","format","toString","style","width","Math","round","Component","h3","MealItemCont","MeealTitle","h2","MealContent","api_link","get_date_str","date","toISOString","substr","replace","IsPastMeal","row","now","Date","now_date_str","MLSV_YMD","MMEAL_SC_NM","getHours","filterMeal","meal_text","k","MealView","interval","state","mealInfo","fetch","res","json","data","mealServiceDietInfo","forEach","meal_title","push","menu","DDISH_NM","title","idx","Number","MMEAL_SC_CODE","sort","a","b","setState","slice","text","api_key","raw_api_link","setApiLink","then","update","clearInterval","mealList","map","meal","key","Container","Title","App","useState","set_nowDate","useEffect","setInterval","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fda4e978.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Content = styled.div`\r\n  margin-top: 1rem;\r\n  font-size: 3.5rem;\r\n  color: #fff;\r\n`;\r\n\r\nexport const Bar = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: row;\r\n  margin-top: 2.5rem;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nexport const OutterBar = styled.div`\r\n  width: 35rem;\r\n  height: 1.2rem;\r\n  background-color: #666666;\r\n  border-radius: 28px;\r\n`;\r\n\r\nexport const InnerBar = styled.div`\r\n  width: 99.1%;\r\n  height: 1.2rem;\r\n  background-color: #03965d;\r\n  border-radius: 28px;\r\n`;\r\n\r\nexport const BarText = styled.div`\r\n  color: white;\r\n  vertical-align: middle;\r\n  margin-left: 1rem;\r\n  font-size: 1.2rem;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport * as S from './PercentageGauage.style';\r\nimport moment from 'moment';\r\n\r\nfunction inject_date() {\r\n  return moment([2020, 9 - 1, 13, 18, 30]);\r\n}\r\nfunction eject_date() {\r\n  return moment([2020, 9 - 1, 29, 18, 30]);\r\n}\r\n\r\nfunction FormatFF_FF(number) {\r\n  return Math.round(number * 10000) / 100 + '%';\r\n}\r\n\r\nclass PercentageGauage extends Component {\r\n  render() {\r\n    const fulltime = eject_date() - inject_date();\r\n    const nowtime = this.props.nowDate - inject_date();\r\n    //console.log(nowtime);\r\n    return (\r\n      <>\r\n        <S.Content>\r\n          {nowtime < fulltime\r\n            ? eject_date()\r\n                .subtract(this.props.nowDate)\r\n                .format('집까지 D일 H시간 m분 s초')\r\n                .toString()\r\n            : '집 갈 시간입니다!'}\r\n        </S.Content>\r\n        <S.Bar>\r\n          <S.OutterBar>\r\n            <S.InnerBar style={{ width: `${(nowtime / fulltime) * 100}%` }} />\r\n          </S.OutterBar>\r\n          <S.BarText>{FormatFF_FF(nowtime / fulltime)}</S.BarText>\r\n        </S.Bar>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport { PercentageGauage };\r\n\r\n/*\r\nconst TABLE = require('./TimeTable.json');\r\n\r\nfunction eject_date()\r\n{\r\n  const now_date = new Date();\r\n  const now_year = now_date.getFullYear();\r\n  const now_month = now_date.getMonth();\r\n  const now_day = now_date.getDay();\r\n\r\n  const date_list = [];\r\n\r\n  for (let k = 1; k < TABLE.length; ++k) {\r\n    const date_str = TABLE[k].ALL_TI_YMD;\r\n    const date_year = Number(date_str.substr(0, 4));\r\n    const date_month = Number(date_str.substr(4, 2));\r\n    const date_day = Number(date_str.substr(6, 2));\r\n\r\n    if (\r\n      date_year > now_year ||\r\n      (date_year === now_year && date_month > now_month) ||\r\n      (date_year === now_year && date_month === now_month && date_day > now_day)\r\n    ) {\r\n      if (date_list.find((e) => e === date_str) === undefined)\r\n        date_list.push(date_str);\r\n    }\r\n  }\r\n  date_list.sort();\r\n  console.log(date_list);\r\n  const eject_date = new Date();\r\n  while (true) {\r\n    if (\r\n      date_list.findIndex((e) => e === get_date_str(eject_date)) !== -1 ||\r\n      eject_date.getDay() === 0\r\n    ) {\r\n      eject_date.setDate(eject_date.getDate() + 1);\r\n    } else break;\r\n  }\r\n  console.log(eject_date);\r\n}\r\n*/\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 3rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n  font-size: 1.3rem;\r\n  text-align: center;\r\n  margin-bottom: 1.5rem;\r\n  color: #fff;\r\n`;\r\n\r\nexport const MealItemCont = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: #f2f2f2;\r\n\r\n  & + & {\r\n    margin-top: 1.2rem;\r\n  }\r\n\r\n  & > * {\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const MeealTitle = styled.h2`\r\n  font-size: 2.5rem;\r\n  margin-bottom: 0.4rem;\r\n  color: #4db8ff;\r\n`;\r\n\r\nexport const MealContent = styled.div`\r\n  line-height: 1.5;\r\n  font-size: 1.8rem;\r\n  white-space: pre-wrap;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport * as S from './MealView.style';\r\n\r\nconst raw_api_link =\r\n  'https://open.neis.go.kr/hub/mealServiceDietInfo?ATPT_OFCDC_SC_CODE=D10&SD_SCHUL_CODE=7240393&MLSV_FROM_YMD=20200925&Type=json';\r\nlet api_link = null;\r\n\r\nfunction get_date_str(date) {\r\n  return date.toISOString().substr(0, 10).replace(/-/g, '');\r\n}\r\n\r\nfunction IsPastMeal(row) {\r\n  const now = new Date();\r\n  const now_date_str = get_date_str(now);\r\n  if (row.MLSV_YMD > now_date_str) return false;\r\n  else if (row.MLSV_YMD < now_date_str) return true;\r\n  else {\r\n    if (row.MMEAL_SC_NM === '조식') return now.getHours() >= 8;\r\n    else if (row.MMEAL_SC_NM === '중식') return now.getHours() >= 13;\r\n    else if (row.MMEAL_SC_NM === '석식') return now.getHours() >= 19;\r\n  }\r\n}\r\n\r\nfunction filterMeal(meal_text) {\r\n  for (let k = 19; k > 0; --k) {\r\n    meal_text = meal_text.replace(`${k}.`, '');\r\n  }\r\n  return meal_text.replace(/<br\\/>/g, '\\n');\r\n}\r\n\r\nclass MealView extends Component {\r\n  interval = null;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mealInfo: [],\r\n    };\r\n  }\r\n\r\n  async update() {\r\n    const res = await fetch(api_link);\r\n    const data = await res.json();\r\n    const now_date_str = get_date_str(new Date());\r\n\r\n    const mealInfo = [];\r\n    data.mealServiceDietInfo[1].row.forEach((row) => {\r\n      if (IsPastMeal(row)) return;\r\n      let meal_title = 'undefined';\r\n      if (row.MLSV_YMD === now_date_str) meal_title = row.MMEAL_SC_NM;\r\n      else\r\n        meal_title =\r\n          `${row.MLSV_YMD.substr(0, 4)}/` +\r\n          `${row.MLSV_YMD.substr(4, 2)}/` +\r\n          `${row.MLSV_YMD.substr(6, 2)} ${row.MMEAL_SC_NM}`;\r\n      mealInfo.push({\r\n        menu: filterMeal(row.DDISH_NM),\r\n        title: meal_title,\r\n        idx: Number(row.MLSV_YMD + row.MMEAL_SC_CODE),\r\n      });\r\n    });\r\n    mealInfo.sort((a, b) => a.idx - b.idx);\r\n    this.setState({ mealInfo: mealInfo.slice(0, 3) });\r\n  }\r\n\r\n  async setApiLink() {\r\n    const res = await fetch('/open_api_key');\r\n    const api_key = await res.text();\r\n    api_link = raw_api_link + '&KEY=' + api_key;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setApiLink().then(() => {\r\n      this.update();\r\n\r\n      //this.interval = setInterval(ths.update, 600000);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const mealList = this.state.mealInfo.map((meal, idx) => {\r\n      return (\r\n        <S.MealItemCont key={idx}>\r\n          <S.MeealTitle>&lt; {meal.title} &gt;</S.MeealTitle>\r\n          <S.MealContent>{meal.menu}</S.MealContent>\r\n        </S.MealItemCont>\r\n      );\r\n    });\r\n    return <div>{mealList}</div>;\r\n  }\r\n}\r\nexport { MealView };\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  background-color: #282c34;\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  overflow: hidden;\r\n  cursor: none;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 2.5rem;\r\n  color: #d9d9d9;\r\n  padding-top: 2.5rem;\r\n\r\n  & > * + * {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\n\nimport { PercentageGauage } from './components/PercentageGauage';\nimport { MealView } from './components/MealView';\nimport * as S from './App.style';\n\nimport moment from 'moment';\n\nfunction App() {\n  const [nowDate, set_nowDate] = useState(moment());\n  useEffect(() => {\n    setInterval(() => set_nowDate(moment()), 500);\n  });\n  return (\n    <S.Container className='App'>\n      <S.Title>{nowDate.format('ddd YYYY.M.D').toString()}</S.Title>\n      <PercentageGauage nowDate={nowDate} />\n      <MealView />\n    </S.Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}